!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ijp/.vim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
("<C-d>",	vimrc	/^nnoremap("<C-d>", "<C-d>zz")$/;"	m
("<C-u>",	vimrc	/^nnoremap("<C-u>", "<C-u>zz")$/;"	m
3.0.0	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 3.0.0$/;"	t	chapter:NERDTree Change Log
3.0.1	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 3.0.1$/;"	t	chapter:NERDTree Change Log
3.1.0	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 3.1.0$/;"	t	chapter:NERDTree Change Log
3.1.1	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 3.1.1$/;"	t	chapter:NERDTree Change Log
4.0.0	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 4.0.0$/;"	t	chapter:NERDTree Change Log
4.1.0	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 4.1.0$/;"	t	chapter:NERDTree Change Log
4.2.0	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 4.2.0$/;"	t	chapter:NERDTree Change Log
5.0.0	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 5.0.0$/;"	t	chapter:NERDTree Change Log
5.1	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 5.1$/;"	t	chapter:NERDTree Change Log
5.2	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 5.2$/;"	t	chapter:NERDTree Change Log
5.3	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 5.3$/;"	t	chapter:NERDTree Change Log
6.0	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.0$/;"	t	chapter:NERDTree Change Log
6.1	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.1$/;"	t	chapter:NERDTree Change Log
6.10	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.10$/;"	t	chapter:NERDTree Change Log
6.2	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.2$/;"	t	chapter:NERDTree Change Log
6.3	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.3$/;"	t	chapter:NERDTree Change Log
6.4	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.4$/;"	t	chapter:NERDTree Change Log
6.5	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.5$/;"	t	chapter:NERDTree Change Log
6.6	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.6$/;"	t	chapter:NERDTree Change Log
6.7	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.7$/;"	t	chapter:NERDTree Change Log
6.8	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.8$/;"	t	chapter:NERDTree Change Log
6.9	pack/plugins/start/nerdtree/CHANGELOG.md	/^#### 6.9$/;"	t	chapter:NERDTree Change Log
<cr>	autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<plug>(plug-preview)	autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
Author's Instructions	pack/plugins/start/nerdtree/.github/PULL_REQUEST_TEMPLATE.md	/^#### Author's Instructions$/;"	t	subsection:New Version Info
Background Colors (palette1)	pack/colors/start/everforest/palette.md	/^#### Background Colors (palette1)$/;"	t	subsection:Color Palette and Highlighting Semantics""Palette Variants""Dark
Background Colors (palette1)	pack/colors/start/everforest/palette.md	/^#### Background Colors (palette1)$/;"	t	subsection:Color Palette and Highlighting Semantics""Palette Variants""Light
Bookmark	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
Can I have the same NERDTree on every tab automatically?	pack/plugins/start/nerdtree/README.markdown	/^### Can I have the same NERDTree on every tab automatically?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Can NERDTree access remote files via scp or ftp?	pack/plugins/start/nerdtree/README.markdown	/^### Can NERDTree access remote files via scp or ftp?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
ClearAllBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
Collaborator's Instructions	pack/plugins/start/nerdtree/.github/PULL_REQUEST_TEMPLATE.md	/^#### Collaborator's Instructions$/;"	t	subsection:New Version Info
Color Palette and Highlighting Semantics	pack/colors/start/everforest/palette.md	/^# Color Palette and Highlighting Semantics$/;"	c
Contents	pack/colors/start/everforest/palette.md	/^## Contents$/;"	s	chapter:Color Palette and Highlighting Semantics
Contributing	pack/colors/start/everforest/README.md	/^## Contributing$/;"	s
Current Behavior (Include screenshots where appropriate.)	pack/plugins/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Current Behavior (Include screenshots where appropriate.)$/;"	t
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
Dark	pack/colors/start/everforest/palette.md	/^### Dark$/;"	S	section:Color Palette and Highlighting Semantics""Palette Variants
Description	pack/colors/start/everforest/.github/pull_request_template.md	/^### Description$/;"	S
Description	pack/plugins/start/nerdtree/.github/ISSUE_TEMPLATE/feature_request.md	/^#### Description$/;"	t
Description of Changes	pack/plugins/start/nerdtree/.github/PULL_REQUEST_TEMPLATE.md	/^### Description of Changes$/;"	S
Documentation	pack/colors/start/everforest/README.md	/^## Documentation$/;"	s
EditBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 EditBookmarks call g:NERDTreeBookmark.Edit()$/;"	c
Environment	pack/plugins/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Environment$/;"	t
Expected Result	pack/plugins/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Expected Result$/;"	t
Features	pack/colors/start/everforest/README.md	/^### Features$/;"	S	section:Introduction
Foreground Colors (palette2)	pack/colors/start/everforest/palette.md	/^#### Foreground Colors (palette2)$/;"	t	subsection:Color Palette and Highlighting Semantics""Palette Variants""Dark
Foreground Colors (palette2)	pack/colors/start/everforest/palette.md	/^#### Foreground Colors (palette2)$/;"	t	subsection:Color Palette and Highlighting Semantics""Palette Variants""Light
Frequently Asked Questions	pack/plugins/start/nerdtree/README.markdown	/^## Frequently Asked Questions$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Getting Started	pack/plugins/start/nerdtree/README.markdown	/^## Getting Started$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Highlights	pack/colors/start/everforest/palette.md	/^## Highlights$/;"	s	chapter:Color Palette and Highlighting Semantics
How can I change the default arrows?	pack/plugins/start/nerdtree/README.markdown	/^### How can I change the default arrows?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I close Vim or a tab automatically when NERDTree is the last window?	pack/plugins/start/nerdtree/README.markdown	/^### How can I close Vim or a tab automatically when NERDTree is the last window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I map a specific key or shortcut to open NERDTree?	pack/plugins/start/nerdtree/README.markdown	/^### How can I map a specific key or shortcut to open NERDTree?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I prevent other buffers replacing NERDTree in its window?	pack/plugins/start/nerdtree/README.markdown	/^### How can I prevent other buffers replacing NERDTree in its window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How do I open NERDTree automatically when Vim starts?	pack/plugins/start/nerdtree/README.markdown	/^### How do I open NERDTree automatically when Vim starts?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Inspirations	pack/colors/start/everforest/README.md	/^## Inspirations$/;"	s
Installation	pack/plugins/start/nerdtree/README.markdown	/^## Installation$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Introduction	pack/colors/start/everforest/README.md	/^## Introduction$/;"	s
Introduction	pack/plugins/start/nerdtree/README.markdown	/^## Introduction$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
License	pack/colors/start/everforest/README.md	/^## License$/;"	s
Light	pack/colors/start/everforest/palette.md	/^### Light$/;"	S	section:Color Palette and Highlighting Semantics""Palette Variants
Maintainers	pack/colors/start/everforest/README.md	/^## Maintainers$/;"	s
More Color Schemes	pack/colors/start/everforest/README.md	/^## More Color Schemes$/;"	s
NERDTree	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree Change Log	pack/plugins/start/nerdtree/CHANGELOG.md	/^# NERDTree Change Log$/;"	c
NERDTree Plugins	pack/plugins/start/nerdtree/README.markdown	/^## NERDTree Plugins$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
NERDTreeAddKeyMap	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeClose	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDeleteNode	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	pack/plugins/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	pack/plugins/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeExecuteFileWindows	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileWindows()$/;"	f
NERDTreeFind	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=file -bar NERDTreeFind call s:findAndRevealPath('<args>')$/;"	c
NERDTreeFocus	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeHijackNetrw	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRefreshRoot	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeRefreshRoot call s:refreshRoot()$/;"	c
NERDTreeRender	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeSystemCommand	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeSystemCommand()$/;"	f
NERDTreeToggle	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NERDTreeToggleVCS	pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeVCS	pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
New Version Info	pack/plugins/start/nerdtree/.github/PULL_REQUEST_TEMPLATE.md	/^### New Version Info$/;"	S
OpenBookmark	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark call /;"	c
Palette	pack/colors/start/everforest/README.md	/^### Palette$/;"	S	section:Introduction
Palette Variants	pack/colors/start/everforest/palette.md	/^## Palette Variants$/;"	s	chapter:Color Palette and Highlighting Semantics
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
ReadBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
Related Projects	pack/colors/start/everforest/README.md	/^## Related Projects$/;"	s
RevealBookmark	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
Screenshots	pack/colors/start/everforest/.github/pull_request_template.md	/^### Screenshots$/;"	S
Self-Diagnosis	pack/plugins/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Self-Diagnosis$/;"	t
State Your Question	pack/plugins/start/nerdtree/.github/ISSUE_TEMPLATE/question.md	/^#### State Your Question$/;"	t
Steps to Reproduce the Issue	pack/plugins/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Steps to Reproduce the Issue$/;"	t
The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)	pack/plugins/start/nerdtree/README.markdown	/^# The NERDTree [![Vint](https:\/\/github.com\/preservim\/nerdtree\/workflows\/Vint\/badge.svg)](/;"	c
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
WriteBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
d	autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
dd	autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
everforest#ftplugin_detect	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#ftplugin_detect(path) "{{{$/;"	f
everforest#get_configuration	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#get_configuration() "{{{$/;"	f
everforest#get_palette	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#get_palette(background, colors_override) "{{{$/;"	f
everforest#highlight	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#highlight(group, fg, bg, ...) "{{{$/;"	f
everforest#syn_clean	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#syn_clean(path, msg) "{{{$/;"	f
everforest#syn_exists	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#syn_exists(path) "{{{$/;"	f
everforest#syn_gen	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#syn_gen(path, last_modified, msg) "{{{$/;"	f
everforest#syn_newest	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#syn_newest(path, last_modified) "{{{$/;"	f
everforest#syn_rootpath	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#syn_rootpath(path) "{{{$/;"	f
everforest#syn_write	pack/colors/start/everforest/autoload/everforest.vim	/^function! everforest#syn_write(rootpath, syn, content) "{{{$/;"	f
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a
g:Lf_PopupColorscheme	pack/colors/start/everforest/colors/everforest.vim	/^  let g:Lf_PopupColorscheme = 'everforest'$/;"	v
g:Lf_StlColorscheme	pack/colors/start/everforest/colors/everforest.vim	/^  let g:Lf_StlColorscheme = 'everforest'$/;"	v
g:NERDTree	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoCenter	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenter            = get(g:, 'NERDTreeAutoCenter',            1)$/;"	v
g:NERDTreeAutoCenterThreshold	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenterThreshold   = get(g:, 'NERDTreeAutoCenterThreshold',   3)$/;"	v
g:NERDTreeAutoDeleteBuffer	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeBookmarksFile	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksFile         = get(g:, 'NERDTreeBookmarksFile',         expand('$HOME') ./;"	v
g:NERDTreeBookmarksSort	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksSort         = get(g:, 'NERDTreeBookmarksSort',         1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = get(g:, 'NERDTreeCascadeOpenSingleChildDir', 1)$/;"	v
g:NERDTreeCascadeSingleChildDir	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeSingleChildDir     = get(g:, 'NERDTreeCascadeSingleChildDir',     1)$/;"	v
g:NERDTreeCaseSensitiveSort	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveSort     = get(g:, 'NERDTreeCaseSensitiveSort',     0)$/;"	v
g:NERDTreeChDirMode	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeChDirMode             = get(g:, 'NERDTreeChDirMode',             0)$/;"	v
g:NERDTreeCopyCmd	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyCmd      = get(g:, 'NERDTreeCopyCmd',      'cp -r ')$/;"	v
g:NERDTreeCopyDirCmd	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyDirCmd   = get(g:, 'NERDTreeCopyDirCmd',   'xcopy \/s \/e \/i \/y \/q ')$/;"	v
g:NERDTreeCopyFileCmd	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyFileCmd  = get(g:, 'NERDTreeCopyFileCmd',  'copy \/y ')$/;"	v
g:NERDTreeCreatePrefix	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCreatePrefix          = get(g:, 'NERDTreeCreatePrefix',          'silent')$/;"	v
g:NERDTreeCreator	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeCustomOpenArgs	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = get(g:, 'NERDTreeCustomOpenArgs', {})$/;"	v
g:NERDTreeCustomOpenArgs	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = l:defaultOpenArgs$/;"	v
g:NERDTreeDirArrowCollapsible	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '~')$/;"	v
g:NERDTreeDirArrowCollapsible	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '▾')$/;"	v
g:NERDTreeDirArrowExpandable	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '+')$/;"	v
g:NERDTreeDirArrowExpandable	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '▸')$/;"	v
g:NERDTreeDirNode	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	pack/plugins/start/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeGlyphReadOnly	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeGlyphReadOnly = get(g:, 'NERDTreeGlyphReadOnly', 'RO')$/;"	v
g:NERDTreeHighlightCursorline	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHighlightCursorline   = get(g:, 'NERDTreeHighlightCursorline',   1)$/;"	v
g:NERDTreeHijackNetrw	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHijackNetrw           = get(g:, 'NERDTreeHijackNetrw',           1)$/;"	v
g:NERDTreeIgnore	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeIgnore                = get(g:, 'NERDTreeIgnore',                ['\\~$'])$/;"	v
g:NERDTreeInvalidBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapActivateNode	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapActivateNode    = get(g:, 'NERDTreeMapActivateNode',    'o')$/;"	v
g:NERDTreeMapCWD	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCWD             = get(g:, 'NERDTreeMapCWD',             'CD')$/;"	v
g:NERDTreeMapChangeRoot	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChangeRoot      = get(g:, 'NERDTreeMapChangeRoot',      'C')$/;"	v
g:NERDTreeMapChdir	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChdir           = get(g:, 'NERDTreeMapChdir',           'cd')$/;"	v
g:NERDTreeMapCloseChildren	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseChildren   = get(g:, 'NERDTreeMapCloseChildren',   'X')$/;"	v
g:NERDTreeMapCloseDir	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseDir        = get(g:, 'NERDTreeMapCloseDir',        'x')$/;"	v
g:NERDTreeMapCustomOpen	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      '<CR>')$/;"	v
g:NERDTreeMapDeleteBookmark	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapDeleteBookmark  = get(g:, 'NERDTreeMapDeleteBookmark',  'D')$/;"	v
g:NERDTreeMapHelp	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapHelp            = get(g:, 'NERDTreeMapHelp',            '?')$/;"	v
g:NERDTreeMapJumpFirstChild	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpFirstChild  = get(g:, 'NERDTreeMapJumpFirstChild',  'K')$/;"	v
g:NERDTreeMapJumpLastChild	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpLastChild   = get(g:, 'NERDTreeMapJumpLastChild',   'J')$/;"	v
g:NERDTreeMapJumpNextSibling	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpNextSibling = get(g:, 'NERDTreeMapJumpNextSibling', '<C-j>')$/;"	v
g:NERDTreeMapJumpParent	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpParent      = get(g:, 'NERDTreeMapJumpParent',      'p')$/;"	v
g:NERDTreeMapJumpPrevSibling	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpPrevSibling = get(g:, 'NERDTreeMapJumpPrevSibling', '<C-k>')$/;"	v
g:NERDTreeMapJumpRoot	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpRoot        = get(g:, 'NERDTreeMapJumpRoot',        'P')$/;"	v
g:NERDTreeMapMenu	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapMenu            = get(g:, 'NERDTreeMapMenu',            'm')$/;"	v
g:NERDTreeMapOpenExpl	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenExpl        = get(g:, 'NERDTreeMapOpenExpl',        'e')$/;"	v
g:NERDTreeMapOpenInTab	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTab       = get(g:, 'NERDTreeMapOpenInTab',       't')$/;"	v
g:NERDTreeMapOpenInTabSilent	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTabSilent = get(g:, 'NERDTreeMapOpenInTabSilent', 'T')$/;"	v
g:NERDTreeMapOpenRecursively	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenRecursively = get(g:, 'NERDTreeMapOpenRecursively', 'O')$/;"	v
g:NERDTreeMapOpenSplit	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenSplit       = get(g:, 'NERDTreeMapOpenSplit',       'i')$/;"	v
g:NERDTreeMapOpenVSplit	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenVSplit      = get(g:, 'NERDTreeMapOpenVSplit',      's')$/;"	v
g:NERDTreeMapPreview	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreview         = get(g:, 'NERDTreeMapPreview',         'g'.NERDTreeMapActivate/;"	v
g:NERDTreeMapPreviewSplit	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewSplit    = get(g:, 'NERDTreeMapPreviewSplit',    'g'.NERDTreeMapOpenSpli/;"	v
g:NERDTreeMapPreviewVSplit	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewVSplit   = get(g:, 'NERDTreeMapPreviewVSplit',   'g'.NERDTreeMapOpenVSpl/;"	v
g:NERDTreeMapQuit	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapQuit            = get(g:, 'NERDTreeMapQuit',            'q')$/;"	v
g:NERDTreeMapRefresh	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefresh         = get(g:, 'NERDTreeMapRefresh',         'r')$/;"	v
g:NERDTreeMapRefreshRoot	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefreshRoot     = get(g:, 'NERDTreeMapRefreshRoot',     'R')$/;"	v
g:NERDTreeMapToggleBookmarks	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleBookmarks = get(g:, 'NERDTreeMapToggleBookmarks', 'B')$/;"	v
g:NERDTreeMapToggleFiles	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFiles     = get(g:, 'NERDTreeMapToggleFiles',     'F')$/;"	v
g:NERDTreeMapToggleFilters	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFilters   = get(g:, 'NERDTreeMapToggleFilters',   'f')$/;"	v
g:NERDTreeMapToggleHidden	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleHidden    = get(g:, 'NERDTreeMapToggleHidden',    'I')$/;"	v
g:NERDTreeMapToggleZoom	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleZoom      = get(g:, 'NERDTreeMapToggleZoom',      'A')$/;"	v
g:NERDTreeMapUpdir	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdir           = get(g:, 'NERDTreeMapUpdir',           'u')$/;"	v
g:NERDTreeMapUpdirKeepOpen	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdirKeepOpen   = get(g:, 'NERDTreeMapUpdirKeepOpen',   'U')$/;"	v
g:NERDTreeMarkBookmarks	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMarkBookmarks         = get(g:, 'NERDTreeMarkBookmarks',         1)$/;"	v
g:NERDTreeMenuController	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuDown	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuDown           = get(g:, 'NERDTreeMenuDown',           'j')$/;"	v
g:NERDTreeMenuItem	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeMenuUp	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuUp             = get(g:, 'NERDTreeMenuUp',             'k')$/;"	v
g:NERDTreeMinimalMenu	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalMenu           = get(g:, 'NERDTreeMinimalMenu',           0)$/;"	v
g:NERDTreeMinimalUI	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalUI             = get(g:, 'NERDTreeMinimalUI',             0)$/;"	v
g:NERDTreeMouseMode	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMouseMode             = get(g:, 'NERDTreeMouseMode',             1)$/;"	v
g:NERDTreeNaturalSort	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNaturalSort           = get(g:, 'NERDTreeNaturalSort',           0)$/;"	v
g:NERDTreeNodeDelimiter	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00a0")$/;"	v
g:NERDTreeNodeDelimiter	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00b7")$/;"	v
g:NERDTreeNodeDelimiter	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\x07")$/;"	v
g:NERDTreeNotificationThreshold	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNotificationThreshold = get(g:, 'NERDTreeNotificationThreshold', 100)$/;"	v
g:NERDTreeOldSortOrder	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^    let g:NERDTreeOldSortOrder = g:NERDTreeSortOrder$/;"	v
g:NERDTreeOldSortOrder	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^                let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^        let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeQuitOnOpen            = get(g:, 'NERDTreeQuitOnOpen',            0)$/;"	v
g:NERDTreeRemoveDirCmd	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rm -rf ')$/;"	v
g:NERDTreeRemoveDirCmd	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rmdir \/s \/q ')$/;"	v
g:NERDTreeRespectWildIgnore	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeRespectWildIgnore     = get(g:, 'NERDTreeRespectWildIgnore',     0)$/;"	v
g:NERDTreeShowBookmarks	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowBookmarks         = get(g:, 'NERDTreeShowBookmarks',         0)$/;"	v
g:NERDTreeShowFiles	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowFiles             = get(g:, 'NERDTreeShowFiles',             1)$/;"	v
g:NERDTreeShowHidden	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowHidden            = get(g:, 'NERDTreeShowHidden',            0)$/;"	v
g:NERDTreeShowLineNumbers	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowLineNumbers       = get(g:, 'NERDTreeShowLineNumbers',       0)$/;"	v
g:NERDTreeSortDirs	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortDirs              = get(g:, 'NERDTreeSortDirs',              1)$/;"	v
g:NERDTreeSortHiddenFirst	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortHiddenFirst       = get(g:, 'NERDTreeSortHiddenFirst',       1)$/;"	v
g:NERDTreeSortOrder	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortOrder    = get(g:, 'NERDTreeSortOrder', ['\\\/$', '*', '\\.swp$', '\\.bak$', '/;"	v
g:NERDTreeStatusline	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeStatusline = get(g:, 'NERDTreeStatusline', "%{exists('b:NERDTree')?b:NERDTree.root/;"	v
g:NERDTreeUI	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUseTCD	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeUseTCD                = get(g:, 'NERDTreeUseTCD',                0)$/;"	v
g:NERDTreeWinPos	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinPos  = get(g:, 'NERDTreeWinPos', 'left')$/;"	v
g:NERDTreeWinSize	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinSize = get(g:, 'NERDTreeWinSize', 31)$/;"	v
g:VM_Cursor_hl	pack/colors/start/everforest/colors/everforest.vim	/^let g:VM_Cursor_hl = 'VMCursor'$/;"	v
g:VM_Extend_hl	pack/colors/start/everforest/colors/everforest.vim	/^let g:VM_Extend_hl = 'Visual'$/;"	v
g:VM_Insert_hl	pack/colors/start/everforest/colors/everforest.vim	/^let g:VM_Insert_hl = 'VMCursor'$/;"	v
g:VM_Mono_hl	pack/colors/start/everforest/colors/everforest.vim	/^let g:VM_Mono_hl = 'VMCursor'$/;"	v
g:YCM_HIGHLIGHT_GROUP	pack/colors/start/everforest/colors/everforest.vim	/^  let g:YCM_HIGHLIGHT_GROUP = {$/;"	v
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette = {}$/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.accents = {$/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline = airline#themes#generate_color_map(s:R1, s:/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_error = [ s:error_fg[0] , s:error_bg/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_error_inactive = [ s:error_fg[0] , s/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_error_red = [ s:error_fg[0] , s:erro/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_term = [ s:term_fg[0] , s:term_bg[0]/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_warning = [ s:warning_fg[0] , s:warn/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_warning_inactive = [ s:warning_fg[0]/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_warning_red = [ s:warning_fg[0] , s:/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline_modified = deepcopy(g:airline#themes#everfor/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline_modified.airline_c = [ s:commandline_mod_fg[/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.inactive = airline#themes#generate_color_map(s:IA1, s:IA/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.inactive.airline_term = [ s:inactive_mid_fg[0] , s:inact/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.inactive_modified = deepcopy(g:airline#themes#everforest/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.inactive_modified.airline_c = [ s:inactive_mod_fg[0] , s/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert = airline#themes#generate_color_map(s:I1, s:I2, s/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_error = [ s:error_fg[0] , s:error_bg[0] ,/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_error_inactive = [ s:error_fg[0] , s:erro/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_error_red = [ s:error_fg[0] , s:error_bg[/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_term = [ s:term_fg[0] , s:term_bg[0] , s:/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_warning = [ s:warning_fg[0] , s:warning_b/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_warning_inactive = [ s:warning_fg[0] , s:/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_warning_red = [ s:warning_fg[0] , s:warni/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert_modified = deepcopy(g:airline#themes#everforest#p/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert_modified.airline_c = [ s:insert_mod_fg[0] , s:ins/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal = airline#themes#generate_color_map(s:N1, s:N2, s/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_error = [ s:error_fg[0] , s:error_bg[0] ,/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_error_inactive = [ s:error_fg[0] , s:erro/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_error_red = [ s:error_fg[0] , s:error_bg[/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_term = [ s:term_fg[0] , s:term_bg[0] , s:/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_warning = [ s:warning_fg[0] , s:warning_b/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_warning_inactive = [ s:warning_fg[0] , s:/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_warning_red = [ s:warning_fg[0] , s:warni/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal_modified = deepcopy(g:airline#themes#everforest#p/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal_modified.airline_c = [ s:normal_mod_fg[0] , s:nor/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace = airline#themes#generate_color_map(s:R1, s:R2, /;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_error = [ s:error_fg[0] , s:error_bg[0] /;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_error_inactive = [ s:error_fg[0] , s:err/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_error_red = [ s:error_fg[0] , s:error_bg/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_term = [ s:term_fg[0] , s:term_bg[0] , s/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_warning = [ s:warning_fg[0] , s:warning_/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_warning_inactive = [ s:warning_fg[0] , s/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_warning_red = [ s:warning_fg[0] , s:warn/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace_modified = deepcopy(g:airline#themes#everforest#/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace_modified.airline_c = [ s:replace_mod_fg[0] , s:r/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline = {}$/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tab = [ s:tab_fg[0] , s:tab_bg[0] , s:ta/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tab_right = [ s:tab_fg[0] , s:tab_bg[0] /;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabfill = [ s:tab_mid_fg[0] , s:tab_mid_/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabhid = s:IA1$/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tablabel = [ s:tab_label_fg[0] , s:tab_l/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tablabel_right = [ s:tab_label_fg[0] , s/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabmod = [ s:tab_mod_fg[0] , s:tab_mod_b/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabmod_right = [ s:tab_mod_fg[0] , s:tab/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabsel = [ s:tab_sel_fg[0] , s:tab_sel_b/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabsel_right = [ s:tab_sel_fg[0] , s:tab/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabtype = [ s:tab_type_fg[0] , s:tab_typ/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual = airline#themes#generate_color_map(s:V1, s:V2, s/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_error = [ s:error_fg[0] , s:error_bg[0] ,/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_error_inactive = [ s:error_fg[0] , s:erro/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_error_red = [ s:error_fg[0] , s:error_bg[/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_term = [ s:term_fg[0] , s:term_bg[0] , s:/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_warning = [ s:warning_fg[0] , s:warning_b/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_warning_inactive = [ s:warning_fg[0] , s:/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_warning_red = [ s:warning_fg[0] , s:warni/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual_modified = deepcopy(g:airline#themes#everforest#p/;"	v
g:airline#themes#everforest#palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual_modified.airline_c = [ s:visual_mod_fg[0] , s:vis/;"	v
g:colors_name	pack/colors/start/everforest/colors/everforest.vim	/^let g:colors_name = 'everforest'$/;"	v
g:everforest_background	vimrc	/^let g:everforest_background = 'hard' " 'medium'(default), 'soft'$/;"	v
g:everforest_better_performance	vimrc	/^let g:everforest_better_performance = 1 " For better performance$/;"	v
g:everforest_loaded_file_types	pack/colors/start/everforest/colors/everforest.vim	/^let g:everforest_loaded_file_types = []$/;"	v
g:everforest_lsp_kind_color	pack/colors/start/everforest/colors/everforest.vim	/^let g:everforest_lsp_kind_color = [$/;"	v
g:fzf_colors	pack/colors/start/everforest/colors/everforest.vim	/^let g:fzf_colors = {$/;"	v
g:indentLine_color_gui	pack/colors/start/everforest/colors/everforest.vim	/^  let g:indentLine_color_gui = s:palette.bg5[0]$/;"	v
g:indentLine_color_gui	pack/colors/start/everforest/colors/everforest.vim	/^  let g:indentLine_color_gui = s:palette.grey0[0]$/;"	v
g:indentLine_color_term	pack/colors/start/everforest/colors/everforest.vim	/^  let g:indentLine_color_term = s:palette.bg5[1]$/;"	v
g:indentLine_color_term	pack/colors/start/everforest/colors/everforest.vim	/^  let g:indentLine_color_term = s:palette.grey0[1]$/;"	v
g:lightline#colorscheme#everforest#palette	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let g:lightline#colorscheme#everforest#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:limelight_conceal_ctermfg	pack/colors/start/everforest/colors/everforest.vim	/^let g:limelight_conceal_ctermfg = s:palette.grey0[1]$/;"	v
g:limelight_conceal_guifg	pack/colors/start/everforest/colors/everforest.vim	/^let g:limelight_conceal_guifg = s:palette.grey0[0]$/;"	v
g:loaded_nerdtree_autoload	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	pack/plugins/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:niji_dark_colours	pack/colors/start/everforest/colors/everforest.vim	/^let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	pack/colors/start/everforest/colors/everforest.vim	/^let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:rainbow_conf	pack/colors/start/everforest/colors/everforest.vim	/^  let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	pack/colors/start/everforest/colors/everforest.vim	/^  let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	pack/colors/start/everforest/colors/everforest.vim	/^  let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_ctermfgs	pack/colors/start/everforest/colors/everforest.vim	/^let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_guifgs	pack/colors/start/everforest/colors/everforest.vim	/^let g:rainbow_guifgs = [ s:palette.orange[0], s:palette.red[0], s:palette.purple[0], s:palette.b/;"	v
g:rbpt_colorpairs	pack/colors/start/everforest/colors/everforest.vim	/^  let g:rbpt_colorpairs = [['blue', s:palette.blue[0]], ['magenta', s:palette.purple[0]],$/;"	v
g:terminal_ansi_colors	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_ansi_colors = [s:terminal.black[0], s:terminal.red[0], s:terminal.green[0], s/;"	v
g:terminal_color_0	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_0 = s:terminal.black[0]$/;"	v
g:terminal_color_1	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_1 = s:terminal.red[0]$/;"	v
g:terminal_color_10	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_10 = s:terminal.green[0]$/;"	v
g:terminal_color_11	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_11 = s:terminal.yellow[0]$/;"	v
g:terminal_color_12	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_12 = s:terminal.blue[0]$/;"	v
g:terminal_color_13	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_13 = s:terminal.purple[0]$/;"	v
g:terminal_color_14	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_14 = s:terminal.cyan[0]$/;"	v
g:terminal_color_15	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_15 = s:terminal.white[0]$/;"	v
g:terminal_color_2	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_2 = s:terminal.green[0]$/;"	v
g:terminal_color_3	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_3 = s:terminal.yellow[0]$/;"	v
g:terminal_color_4	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_4 = s:terminal.blue[0]$/;"	v
g:terminal_color_5	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_5 = s:terminal.purple[0]$/;"	v
g:terminal_color_6	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_6 = s:terminal.cyan[0]$/;"	v
g:terminal_color_7	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_7 = s:terminal.white[0]$/;"	v
g:terminal_color_8	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_8 = s:terminal.black[0]$/;"	v
g:terminal_color_9	pack/colors/start/everforest/colors/everforest.vim	/^    let g:terminal_color_9 = s:terminal.red[0]$/;"	v
loaded_nerd_tree	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
nerdtree#checkForBrowse	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir) abort$/;"	f
nerdtree#closeBookmarksOnOpen	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeBookmarksOnOpen() abort$/;"	f
nerdtree#closeTreeOnOpen	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeTreeOnOpen() abort$/;"	f
nerdtree#compareNodePaths	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodePaths(p1, p2) abort$/;"	f
nerdtree#compareNodes	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2) abort$/;"	f
nerdtree#completeBookmarks	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P) abort$/;"	f
nerdtree#deprecated	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...) abort$/;"	f
nerdtree#echo	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg) abort$/;"	f
nerdtree#echoError	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg) abort$/;"	f
nerdtree#echoWarning	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg) abort$/;"	f
nerdtree#exec	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll) abort$/;"	f
nerdtree#has_opt	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name) abort$/;"	f
nerdtree#loadClassFiles	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles() abort$/;"	f
nerdtree#postSourceActions	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions() abort$/;"	f
nerdtree#renderView	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView() abort$/;"	f
nerdtree#runningCygwin	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin() abort$/;"	f
nerdtree#runningWindows	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows() abort$/;"	f
nerdtree#slash	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash() abort$/;"	f
nerdtree#ui_glue#bookmarkNode	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...) abort$/;"	f
nerdtree#ui_glue#chRootCwd	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd() abort$/;"	f
nerdtree#ui_glue#clearBookmarks	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks) abort$/;"	f
nerdtree#ui_glue#createDefaultBindings	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings() abort$/;"	f
nerdtree#ui_glue#invokeKeyMap	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key) abort$/;"	f
nerdtree#ui_glue#openBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name) abort$/;"	f
nerdtree#ui_glue#revealBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name) abort$/;"	f
nerdtree#ui_glue#setupCommands	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands() abort$/;"	f
nerdtree#ui_glue#upDir	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState) abort$/;"	f
nerdtree#version	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...) abort$/;"	f
o	autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :call <SID>close_pane()<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
s:Bookmark	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.CompareBookmarksByName	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
s:Bookmark.Edit	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
s:Bookmark.GetNodeForName	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.SortBookmarksList	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
s:Bookmark.ToRoot	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.delete	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:CreateTabTreeVCS	pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
s:Creator	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateMirror	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
s:Creator._nextBufferNumber	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:Event	pack/plugins/start/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event.New	pack/plugins/start/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:FindParentVCSRoot	pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
s:FlagSet	pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:I1	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:I1 = [ s:insert_side_fg[0] , s:insert_side_bg[0] , s:insert_side_fg[1] , s:insert_side_bg[/;"	v
s:I2	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:I2 = [ s:insert_sub_fg[0] , s:insert_sub_bg[0] , s:insert_sub_fg[1] , s:insert_sub_bg[1] ]$/;"	v
s:I3	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:I3 = [ s:insert_mid_fg[0] , s:insert_mid_bg[0] , s:insert_mid_fg[1] , s:insert_mid_bg[1] ]$/;"	v
s:IA1	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:IA1 = [ s:inactive_side_fg[0] , s:inactive_side_bg[0] , s:inactive_side_fg[1] , s:inactive/;"	v
s:IA2	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:IA2 = [ s:inactive_sub_fg[0] , s:inactive_sub_bg[0] , s:inactive_sub_fg[1] , s:inactive_su/;"	v
s:IA3	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:IA3 = [ s:inactive_mid_fg[0] , s:inactive_mid_bg[0] , s:inactive_mid_fg[1] , s:inactive_mi/;"	v
s:KeyMap	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Compare	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
s:KeyMap.Create	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:MenuController	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.isMinimal	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
s:MenuController.showMenu	pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:N1	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:N1 = [ s:normal_side_fg[0] , s:normal_side_bg[0] , s:normal_side_fg[1] , s:normal_side_bg[/;"	v
s:N2	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:N2 = [ s:normal_sub_fg[0] , s:normal_sub_bg[0] , s:normal_sub_fg[1] , s:normal_sub_bg[1] ]$/;"	v
s:N3	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:N3 = [ s:normal_mid_fg[0] , s:normal_mid_bg[0] , s:normal_mid_fg[1] , s:normal_mid_bg[1] ]$/;"	v
s:NERDTree	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CursorToBookmarkTable	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin(...)$/;"	f
s:NERDTree.ExistsForBuf	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:Notifier	pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:Opener	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
s:Path	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
s:Path.CopyingSupported	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
s:Path.Resolve	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.WinToUnixPath	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._splitChunks	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
s:Path._str	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.addDelimiter	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
s:Path.bookmarkNames	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.copy	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(child)$/;"	f
s:Path.isHiddenUnder	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
s:Path.isUnder	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(parent)$/;"	f
s:Path.isUnixHiddenFile	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
s:R1	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:R1 = [ s:commandline_side_fg[0] , s:commandline_side_bg[0] , s:commandline_side_fg[1] , s:/;"	v
s:R1	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:R1 = [ s:replace_side_fg[0] , s:replace_side_bg[0] , s:replace_side_fg[1] , s:replace_side/;"	v
s:R2	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:R2 = [ s:commandline_sub_fg[0] , s:commandline_sub_bg[0] , s:commandline_sub_fg[1] , s:com/;"	v
s:R2	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:R2 = [ s:replace_sub_fg[0] , s:replace_sub_bg[0] , s:replace_sub_fg[1] , s:replace_sub_bg[/;"	v
s:R3	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:R3 = [ s:commandline_mid_fg[0] , s:commandline_mid_bg[0] , s:commandline_mid_fg[1] , s:com/;"	v
s:R3	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:R3 = [ s:replace_mid_fg[0] , s:replace_mid_bg[0] , s:replace_mid_fg[1] , s:replace_mid_bg[/;"	v
s:SID	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:SID() abort$/;"	f
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:ToggleTabTreeVCS	pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
s:TreeDirNode	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._glob	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
s:TreeDirNode._initChildren	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode.activate	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getCascadeRoot	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
s:TreeDirNode.getChild	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getDirChildren	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
s:TreeDirNode.getVisibleChildCount	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findSibling	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openExplorer	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
s:TreeFileNode.openInNewTab	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:UI	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
s:UI.centerView	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
s:UI.getPath	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFiles	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowHidden	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFiles	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:V1	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:V1 = [ s:visual_side_fg[0] , s:visual_side_bg[0] , s:visual_side_fg[1] , s:visual_side_bg[/;"	v
s:V2	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:V2 = [ s:visual_sub_fg[0] , s:visual_sub_bg[0] , s:visual_sub_fg[1] , s:visual_sub_bg[1] ]$/;"	v
s:V3	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:V3 = [ s:visual_mid_fg[0] , s:visual_mid_bg[0] , s:visual_mid_fg[1] , s:visual_mid_bg[1] ]$/;"	v
s:accents	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:accents = s:palette.statusline3$/;"	v
s:activateAll	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll() abort$/;"	f
s:activateBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm) abort$/;"	f
s:activateDirNode	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...) abort$/;"	f
s:activateFileNode	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node) abort$/;"	f
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
s:chCwd	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node) abort$/;"	f
s:chRoot	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node) abort$/;"	f
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:closeChildren	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node) abort$/;"	f
s:closeCurrentDir	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node) abort$/;"	f
s:closeTreeWindow	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow() abort$/;"	f
s:close_pane	autoload/plug.vim	/^function! s:close_pane()$/;"	f
s:command_l1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_l1_bg = s:palette.aqua$/;"	v
s:command_l1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_l1_fg = s:palette.bg0$/;"	v
s:command_l2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_l2_bg = s:palette.bg3$/;"	v
s:command_l2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_l2_fg = s:palette.grey2$/;"	v
s:command_middle_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_middle_bg = s:palette.bg1$/;"	v
s:command_middle_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_middle_fg = s:palette.grey1$/;"	v
s:command_r1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_r1_bg = s:palette.aqua$/;"	v
s:command_r1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_r1_fg = s:palette.bg0$/;"	v
s:command_r2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_r2_bg = s:palette.bg3$/;"	v
s:command_r2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_r2_fg = s:palette.grey2$/;"	v
s:commandline_mid_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_mid_bg = s:palette.bg1$/;"	v
s:commandline_mid_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_mid_fg = s:palette.grey1$/;"	v
s:commandline_mod_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_mod_bg = s:palette.bg1$/;"	v
s:commandline_mod_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_mod_fg = s:palette.aqua$/;"	v
s:commandline_side_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_side_bg = s:palette.aqua$/;"	v
s:commandline_side_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_side_fg = s:palette.bg0$/;"	v
s:commandline_sub_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_sub_bg = s:palette.bg3$/;"	v
s:commandline_sub_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_sub_fg = s:palette.grey2$/;"	v
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:configuration	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:configuration = everforest#get_configuration()$/;"	v
s:configuration	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:configuration = everforest#get_configuration()$/;"	v
s:configuration	pack/colors/start/everforest/colors/everforest.vim	/^let s:configuration = everforest#get_configuration()$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:customOpenBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node) abort$/;"	f
s:customOpenDir	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node) abort$/;"	f
s:customOpenFile	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node) abort$/;"	f
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:deleteBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark) abort$/;"	f
s:delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f
s:dirArrows	pack/plugins/start/nerdtree/syntax/nerdtree.vim	/^    let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowEx/;"	v
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:displayHelp	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp() abort$/;"	f
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:error_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:error_bg = s:palette.statusline3$/;"	v
s:error_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:error_fg = s:palette.bg0$/;"	v
s:errorbg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:errorbg = s:palette.statusline3$/;"	v
s:errorfg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:errorfg = s:palette.bg0$/;"	v
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:findAndRevealPath	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr) abort$/;"	f
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
s:git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
s:git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
s:git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
s:git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:handleLeftClick	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick() abort$/;"	f
s:handleMiddleMouse	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse() abort$/;"	f
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:inactive_l1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_l1_bg = s:palette.bg1$/;"	v
s:inactive_l1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_l1_fg = s:palette.grey1$/;"	v
s:inactive_l2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_l2_bg = s:palette.bg1$/;"	v
s:inactive_l2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_l2_fg = s:palette.grey1$/;"	v
s:inactive_mid_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_mid_bg = s:palette.bg1$/;"	v
s:inactive_mid_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_mid_fg = s:palette.grey1$/;"	v
s:inactive_middle_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_middle_bg = s:palette.bg1$/;"	v
s:inactive_middle_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_middle_fg = s:palette.grey1$/;"	v
s:inactive_mod_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_mod_bg = s:palette.bg1$/;"	v
s:inactive_mod_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_mod_fg = s:palette.grey1$/;"	v
s:inactive_r1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_r1_bg = s:palette.bg1$/;"	v
s:inactive_r1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_r1_fg = s:palette.grey1$/;"	v
s:inactive_r2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_r2_bg = s:palette.bg1$/;"	v
s:inactive_r2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_r2_fg = s:palette.grey1$/;"	v
s:inactive_side_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_side_bg = s:palette.bg1$/;"	v
s:inactive_side_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_side_fg = s:palette.grey1$/;"	v
s:inactive_sub_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_sub_bg = s:palette.bg1$/;"	v
s:inactive_sub_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_sub_fg = s:palette.grey1$/;"	v
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:initCustomOpenArgs	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs() abort$/;"	f
s:inputPrompt	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
s:insert_l1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_l1_bg = s:palette.statusline2$/;"	v
s:insert_l1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_l1_fg = s:palette.bg0$/;"	v
s:insert_l2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_l2_bg = s:palette.bg3$/;"	v
s:insert_l2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_l2_fg = s:palette.fg$/;"	v
s:insert_mid_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_mid_bg = s:palette.bg1$/;"	v
s:insert_mid_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_mid_fg = s:palette.fg$/;"	v
s:insert_middle_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_middle_bg = s:palette.bg1$/;"	v
s:insert_middle_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_middle_fg = s:palette.fg$/;"	v
s:insert_mod_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_mod_bg = s:palette.bg1$/;"	v
s:insert_mod_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_mod_fg = s:palette.fg$/;"	v
s:insert_r1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_r1_bg = s:palette.statusline2$/;"	v
s:insert_r1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_r1_fg = s:palette.bg0$/;"	v
s:insert_r2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_r2_bg = s:palette.bg3$/;"	v
s:insert_r2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_r2_fg = s:palette.fg$/;"	v
s:insert_side_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_side_bg = s:palette.statusline2$/;"	v
s:insert_side_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_side_fg = s:palette.bg0$/;"	v
s:insert_sub_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_sub_bg = s:palette.bg3$/;"	v
s:insert_sub_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_sub_fg = s:palette.fg$/;"	v
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_powershell	autoload/plug.vim	/^function! s:is_powershell(shell)$/;"	f
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:jumpToChild	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last) abort$/;"	f
s:jumpToFirstChild	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node) abort$/;"	f
s:jumpToLastChild	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node) abort$/;"	f
s:jumpToNextSibling	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node) abort$/;"	f
s:jumpToParent	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node) abort$/;"	f
s:jumpToPrevSibling	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node) abort$/;"	f
s:jumpToRoot	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot() abort$/;"	f
s:jumpToSibling	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward) abort$/;"	f
s:keyMaps	pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:last_modified	pack/colors/start/everforest/colors/everforest.vim	/^let s:last_modified = 'Mon Apr 24 19:09:56 UTC 2023'$/;"	v
s:last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
s:normal_l1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_l1_bg = s:palette.statusline1$/;"	v
s:normal_l1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_l1_fg = s:palette.bg0$/;"	v
s:normal_l2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_l2_bg = s:palette.bg3$/;"	v
s:normal_l2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_l2_fg = s:palette.grey2$/;"	v
s:normal_mid_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_mid_bg = s:palette.bg1$/;"	v
s:normal_mid_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_mid_fg = s:palette.grey1$/;"	v
s:normal_middle_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_middle_bg = s:palette.bg1$/;"	v
s:normal_middle_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_middle_fg = s:palette.grey1$/;"	v
s:normal_mod_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_mod_bg = s:palette.bg1$/;"	v
s:normal_mod_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_mod_fg = s:palette.green$/;"	v
s:normal_r1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_r1_bg = s:palette.statusline1$/;"	v
s:normal_r1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_r1_fg = s:palette.bg0$/;"	v
s:normal_r2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_r2_bg = s:palette.bg3$/;"	v
s:normal_r2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_r2_fg = s:palette.grey2$/;"	v
s:normal_side_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_side_bg = s:palette.statusline1$/;"	v
s:normal_side_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_side_fg = s:palette.bg0$/;"	v
s:normal_sub_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_sub_bg = s:palette.bg3$/;"	v
s:normal_sub_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_sub_fg = s:palette.grey2$/;"	v
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:old_cpo	pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpoptions$/;"	v
s:openExplorer	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node) abort$/;"	f
s:openHSplit	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target) abort$/;"	f
s:openHSplitBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplitBookmark(bm) abort$/;"	f
s:openInNewTab	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target) abort$/;"	f
s:openInNewTabSilent	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target) abort$/;"	f
s:openNodeRecursively	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node) abort$/;"	f
s:openVSplit	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target) abort$/;"	f
s:openVSplitBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplitBookmark(bm) abort$/;"	f
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.command.left = [ [ s:command_l1_fg, s:command_l1_bg ], [ s:command_l2_fg, s:command_l2/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.command.right = [ [ s:command_r1_fg, s:command_r1_bg ], [ s:command_r2_fg, s:command_r/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.insert.left = [ [ s:insert_l1_fg, s:insert_l1_bg ], [ s:insert_l2_fg, s:insert_l2_bg ]/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.insert.right = [ [ s:insert_r1_fg, s:insert_r1_bg ], [ s:insert_r2_fg, s:insert_r2_bg /;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.normal.left = [ [ s:normal_l1_fg, s:normal_l1_bg ], [ s:normal_l2_fg, s:normal_l2_bg ]/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.normal.right = [ [ s:normal_r1_fg, s:normal_r1_bg ], [ s:normal_r2_fg, s:normal_r2_bg /;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.replace.left = [ [ s:replace_l1_fg, s:replace_l1_bg ], [ s:replace_l2_fg, s:replace_l2/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.replace.right = [ [ s:replace_r1_fg, s:replace_r1_bg ], [ s:replace_r2_fg, s:replace_r/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.tabline.tabsel = [ [ s:tab_sel_fg, s:tab_sel_bg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.terminal.left = [ [ s:terminal_l1_fg, s:terminal_l1_bg ], [ s:terminal_l2_fg, s:termin/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.terminal.right = [ [ s:terminal_r1_fg, s:terminal_r1_bg ], [ s:terminal_r2_fg, s:termi/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.visual.left = [ [ s:visual_l1_fg, s:visual_l1_bg ], [ s:visual_l2_fg, s:visual_l2_bg ]/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.visual.right = [ [ s:visual_r1_fg, s:visual_r1_bg ], [ s:visual_r2_fg, s:visual_r2_bg /;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'command': {/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.command.left = [ [ s:command_l1_fg, s:command_l1_bg, 'bold' ], [ s:command_l2_fg, s:comm/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.command.middle = [ [ s:command_middle_fg, s:command_middle_bg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.command.right = [ [ s:command_r1_fg, s:command_r1_bg, 'bold' ], [ s:command_r2_fg, s:com/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.inactive.left = [ [ s:inactive_l1_fg, s:inactive_l1_bg ], [ s:inactive_l2_fg, s:inactive/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.inactive.middle = [ [ s:inactive_middle_fg, s:inactive_middle_bg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.inactive.right = [ [ s:inactive_r1_fg, s:inactive_r1_bg ], [ s:inactive_r2_fg, s:inactiv/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.insert.left = [ [ s:insert_l1_fg, s:insert_l1_bg, 'bold' ], [ s:insert_l2_fg, s:insert_l/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.insert.middle = [ [ s:insert_middle_fg, s:insert_middle_bg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.insert.right = [ [ s:insert_r1_fg, s:insert_r1_bg, 'bold' ], [ s:insert_r2_fg, s:insert_/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.error = [ [ s:errorfg, s:errorbg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.left = [ [ s:normal_l1_fg, s:normal_l1_bg, 'bold' ], [ s:normal_l2_fg, s:normal_l/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.middle = [ [ s:normal_middle_fg, s:normal_middle_bg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.right = [ [ s:normal_r1_fg, s:normal_r1_bg, 'bold' ], [ s:normal_r2_fg, s:normal_/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.warning = [ [ s:warningfg, s:warningbg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.replace.left = [ [ s:replace_l1_fg, s:replace_l1_bg, 'bold' ], [ s:replace_l2_fg, s:repl/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.replace.middle = [ [ s:replace_middle_fg, s:replace_middle_bg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.replace.right = [ [ s:replace_r1_fg, s:replace_r1_bg, 'bold' ], [ s:replace_r2_fg, s:rep/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.tabline.left = [ [ s:tab_l_fg, s:tab_l_bg] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.tabline.middle = [ [ s:tab_middle_fg, s:tab_middle_bg] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.tabline.right = [ [ s:tab_r_fg, s:tab_r_bg] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.tabline.tabsel = [ [ s:tab_sel_fg, s:tab_sel_bg, 'bold' ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.terminal.left = [ [ s:terminal_l1_fg, s:terminal_l1_bg, 'bold' ], [ s:terminal_l2_fg, s:/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.terminal.middle = [ [ s:terminal_middle_fg, s:terminal_middle_bg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.terminal.right = [ [ s:terminal_r1_fg, s:terminal_r1_bg, 'bold' ], [ s:terminal_r2_fg, s/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.visual.left = [ [ s:visual_l1_fg, s:visual_l1_bg, 'bold' ], [ s:visual_l2_fg, s:visual_l/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.visual.middle = [ [ s:visual_middle_fg, s:visual_middle_bg ] ]$/;"	v
s:p	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.visual.right = [ [ s:visual_r1_fg, s:visual_r1_bg, 'bold' ], [ s:visual_r2_fg, s:visual_/;"	v
s:palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^  let s:palette.bg1 = s:palette.none$/;"	v
s:palette	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:palette = everforest#get_palette(s:configuration.background, s:configuration.colors_overri/;"	v
s:palette	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:palette.bg1 = s:palette.none$/;"	v
s:palette	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:palette = everforest#get_palette(s:configuration.background, s:configuration.colors_overri/;"	v
s:palette	pack/colors/start/everforest/colors/everforest.vim	/^let s:palette = everforest#get_palette(s:configuration.background, s:configuration.colors_overri/;"	v
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path	pack/colors/start/everforest/colors/everforest.vim	/^let s:path = expand('<sfile>:p') " the path of this script$/;"	v
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
s:plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
s:plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
s:plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:previewBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark) abort$/;"	f
s:previewNodeCurrent	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node) abort$/;"	f
s:previewNodeHSplit	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node) abort$/;"	f
s:previewNodeHSplitBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplitBookmark(bookmark) abort$/;"	f
s:previewNodeVSplit	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node) abort$/;"	f
s:previewNodeVSplitBookmark	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplitBookmark(bookmark) abort$/;"	f
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:promptToDelBuffer	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:refreshCurrent	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node) abort$/;"	f
s:refreshRoot	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot() abort$/;"	f
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:renameBuffer	pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:replace_l1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_l1_bg = s:palette.orange$/;"	v
s:replace_l1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_l1_fg = s:palette.bg0$/;"	v
s:replace_l2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_l2_bg = s:palette.bg3$/;"	v
s:replace_l2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_l2_fg = s:palette.grey2$/;"	v
s:replace_mid_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_mid_bg = s:palette.bg1$/;"	v
s:replace_mid_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_mid_fg = s:palette.grey1$/;"	v
s:replace_middle_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_middle_bg = s:palette.bg1$/;"	v
s:replace_middle_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_middle_fg = s:palette.grey1$/;"	v
s:replace_mod_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_mod_bg = s:palette.bg1$/;"	v
s:replace_mod_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_mod_fg = s:palette.orange$/;"	v
s:replace_r1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_r1_bg = s:palette.orange$/;"	v
s:replace_r1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_r1_fg = s:palette.bg0$/;"	v
s:replace_r2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_r2_bg = s:palette.bg3$/;"	v
s:replace_r2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_r2_fg = s:palette.grey2$/;"	v
s:replace_side_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_side_bg = s:palette.orange$/;"	v
s:replace_side_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_side_fg = s:palette.bg0$/;"	v
s:replace_sub_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_sub_bg = s:palette.bg3$/;"	v
s:replace_sub_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_sub_fg = s:palette.grey2$/;"	v
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f
s:reuseWin	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rootNERDTreePath	pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
s:shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
s:shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
s:showMenu	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node) abort$/;"	f
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:status	autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tab_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_bg = s:palette.bg3$/;"	v
s:tab_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_fg = s:palette.grey2$/;"	v
s:tab_l_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_l_bg = s:palette.bg3$/;"	v
s:tab_l_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_l_fg = s:palette.grey2$/;"	v
s:tab_label_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_label_bg = s:palette.bg3$/;"	v
s:tab_label_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_label_fg = s:palette.grey2$/;"	v
s:tab_mid_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_mid_bg = s:palette.bg1$/;"	v
s:tab_mid_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_mid_fg = s:palette.grey1$/;"	v
s:tab_middle_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_middle_bg = s:palette.bg1$/;"	v
s:tab_middle_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_middle_fg = s:palette.grey1$/;"	v
s:tab_mod_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_mod_bg = s:palette.aqua$/;"	v
s:tab_mod_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_mod_fg = s:palette.bg0$/;"	v
s:tab_r_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_r_bg = s:palette.statusline1$/;"	v
s:tab_r_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_r_fg = s:palette.bg0$/;"	v
s:tab_sel_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_sel_bg = s:palette.statusline1$/;"	v
s:tab_sel_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_sel_bg = s:palette.statusline1$/;"	v
s:tab_sel_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_sel_fg = s:palette.bg0$/;"	v
s:tab_sel_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_sel_fg = s:palette.bg0$/;"	v
s:tab_type_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_type_bg = s:palette.orange$/;"	v
s:tab_type_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_type_fg = s:palette.bg0$/;"	v
s:term_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:term_bg = s:palette.bg1$/;"	v
s:term_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:term_fg = s:palette.grey1$/;"	v
s:terminal	pack/colors/start/everforest/colors/everforest.vim	/^  let s:terminal = {$/;"	v
s:terminal_l1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_l1_bg = s:palette.purple$/;"	v
s:terminal_l1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_l1_fg = s:palette.bg0$/;"	v
s:terminal_l2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_l2_bg = s:palette.bg3$/;"	v
s:terminal_l2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_l2_fg = s:palette.grey2$/;"	v
s:terminal_middle_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_middle_bg = s:palette.bg1$/;"	v
s:terminal_middle_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_middle_fg = s:palette.grey1$/;"	v
s:terminal_r1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_r1_bg = s:palette.purple$/;"	v
s:terminal_r1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_r1_fg = s:palette.bg0$/;"	v
s:terminal_r2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_r2_bg = s:palette.bg3$/;"	v
s:terminal_r2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_r2_fg = s:palette.grey2$/;"	v
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:toggleIgnoreFilter	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter() abort$/;"	f
s:toggleShowBookmarks	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks() abort$/;"	f
s:toggleShowFiles	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles() abort$/;"	f
s:toggleShowHidden	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden() abort$/;"	f
s:toggleZoom	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom() abort$/;"	f
s:tree_up_dir_line	pack/plugins/start/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:upDirCurrentRootClosed	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed() abort$/;"	f
s:upDirCurrentRootOpen	pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen() abort$/;"	f
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:visual_l1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_l1_bg = s:palette.statusline3$/;"	v
s:visual_l1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_l1_fg = s:palette.bg0$/;"	v
s:visual_l2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_l2_bg = s:palette.bg3$/;"	v
s:visual_l2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_l2_fg = s:palette.grey2$/;"	v
s:visual_mid_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_mid_bg = s:palette.bg1$/;"	v
s:visual_mid_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_mid_fg = s:palette.grey1$/;"	v
s:visual_middle_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_middle_bg = s:palette.bg1$/;"	v
s:visual_middle_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_middle_fg = s:palette.grey1$/;"	v
s:visual_mod_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_mod_bg = s:palette.bg1$/;"	v
s:visual_mod_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_mod_fg = s:palette.red$/;"	v
s:visual_r1_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_r1_bg = s:palette.statusline3$/;"	v
s:visual_r1_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_r1_fg = s:palette.bg0$/;"	v
s:visual_r2_bg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_r2_bg = s:palette.bg3$/;"	v
s:visual_r2_fg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_r2_fg = s:palette.grey2$/;"	v
s:visual_side_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_side_bg = s:palette.statusline3$/;"	v
s:visual_side_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_side_fg = s:palette.bg0$/;"	v
s:visual_sub_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_sub_bg = s:palette.bg3$/;"	v
s:visual_sub_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_sub_fg = s:palette.grey2$/;"	v
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warning_bg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:warning_bg = s:palette.yellow$/;"	v
s:warning_fg	pack/colors/start/everforest/autoload/airline/themes/everforest.vim	/^let s:warning_fg = s:palette.bg0$/;"	v
s:warningbg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:warningbg = s:palette.yellow$/;"	v
s:warningfg	pack/colors/start/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:warningfg = s:palette.bg0$/;"	v
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
s:wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
